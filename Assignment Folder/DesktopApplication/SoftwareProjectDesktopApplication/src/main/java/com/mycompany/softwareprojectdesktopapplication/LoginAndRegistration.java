/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.softwareprojectdesktopapplication;
import java.awt.Color;
import java.sql.*;
import java.util.Arrays;
import javax.swing.JOptionPane;
/**
 *
 * @author Raul Mifsud
 */
public class LoginAndRegistration extends javax.swing.JFrame {

    /**
     * Creates new form LoginAndRegistration
     */
    public LoginAndRegistration() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoginUsernameField = new javax.swing.JTextField();
        ApplicationTitle = new javax.swing.JLabel();
        LoginTitle = new javax.swing.JLabel();
        RegistrationTitle = new javax.swing.JLabel();
        LoginPasswordField = new javax.swing.JPasswordField();
        LoginUsername = new javax.swing.JLabel();
        LoginPassword = new javax.swing.JLabel();
        LoginButton = new javax.swing.JButton();
        LoginErrorText = new javax.swing.JLabel();
        RegistrationName = new javax.swing.JLabel();
        RegistrationSurname = new javax.swing.JLabel();
        RegistrationCity = new javax.swing.JLabel();
        RegistrationCountry = new javax.swing.JLabel();
        RegistrationUsername = new javax.swing.JLabel();
        RegistrationPassword = new javax.swing.JLabel();
        RegistrationRepeatPassword = new javax.swing.JLabel();
        RegistrationNameField = new javax.swing.JTextField();
        RegistrationSurnameField = new javax.swing.JTextField();
        RegistrationCityField = new javax.swing.JTextField();
        RegistrationCountryField = new javax.swing.JTextField();
        RegistrationUsernameField = new javax.swing.JTextField();
        RegistrationPasswordField = new javax.swing.JPasswordField();
        RegistrationRepeatPasswordField = new javax.swing.JPasswordField();
        RegistrationButton = new javax.swing.JButton();
        RegistrationErrorField = new javax.swing.JLabel();
        RegistrationEmail = new javax.swing.JLabel();
        RegistrationEmailField = new javax.swing.JTextField();
        EmailErrorField = new javax.swing.JLabel();
        ForgotPasswordText = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registration");

        LoginUsernameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        ApplicationTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ApplicationTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ApplicationTitle.setText("Football Sportswear Management System");

        LoginTitle.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        LoginTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LoginTitle.setText("Login");

        RegistrationTitle.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RegistrationTitle.setText("Registration");

        LoginPasswordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        LoginUsername.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        LoginUsername.setLabelFor(LoginUsernameField);
        LoginUsername.setText("Username:");

        LoginPassword.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        LoginPassword.setLabelFor(LoginPasswordField);
        LoginPassword.setText("Password: ");

        LoginButton.setText("Login");
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        LoginErrorText.setForeground(new java.awt.Color(255, 0, 0));
        LoginErrorText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        RegistrationName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationName.setText("Name: ");

        RegistrationSurname.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationSurname.setText("Surname: ");

        RegistrationCity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationCity.setText("City: ");

        RegistrationCountry.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationCountry.setText("Country: ");

        RegistrationUsername.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationUsername.setText("Username: ");

        RegistrationPassword.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationPassword.setText("Password: ");

        RegistrationRepeatPassword.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationRepeatPassword.setText("Confirm Password: ");

        RegistrationNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        RegistrationSurnameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        RegistrationCityField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        RegistrationCountryField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        RegistrationUsernameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        RegistrationPasswordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        RegistrationRepeatPasswordField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        RegistrationButton.setText("Register");
        RegistrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrationButtonActionPerformed(evt);
            }
        });

        RegistrationErrorField.setForeground(new java.awt.Color(255, 0, 0));
        RegistrationErrorField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        RegistrationEmail.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RegistrationEmail.setText("Email: ");

        RegistrationEmailField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        EmailErrorField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        EmailErrorField.setForeground(new java.awt.Color(255, 0, 0));

        ForgotPasswordText.setForeground(new java.awt.Color(0, 0, 255));
        ForgotPasswordText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ForgotPasswordText.setText("Forgot Password ?");
        ForgotPasswordText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ForgotPasswordTextMouseClicked(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(LoginUsername)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LoginUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(LoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LoginPassword)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(ForgotPasswordText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(LoginPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LoginErrorText, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(LoginButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RegistrationRepeatPassword)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RegistrationRepeatPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RegistrationCountry)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RegistrationCountryField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RegistrationUsername)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RegistrationUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RegistrationPassword)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RegistrationPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RegistrationEmail)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RegistrationEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RegistrationSurname)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RegistrationSurnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RegistrationName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RegistrationNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(32, 32, 32)
                                            .addComponent(RegistrationCityField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(RegistrationCity)))
                                .addGap(18, 18, 18)
                                .addComponent(EmailErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(RegistrationErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(RegistrationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(208, 208, 208))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RegistrationButton)
                .addGap(208, 208, 208))
            .addGroup(layout.createSequentialGroup()
                .addGap(202, 202, 202)
                .addComponent(ApplicationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ApplicationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RegistrationName)
                            .addComponent(RegistrationNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RegistrationSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RegistrationSurnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LoginUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LoginUsername))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LoginPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LoginPassword))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(RegistrationEmail)
                                .addComponent(RegistrationEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(EmailErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RegistrationCity, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RegistrationCityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RegistrationCountry)
                            .addComponent(RegistrationCountryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RegistrationUsername)
                            .addComponent(RegistrationUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RegistrationPassword)
                            .addComponent(RegistrationPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RegistrationRepeatPassword)
                            .addComponent(RegistrationRepeatPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RegistrationErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RegistrationButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ForgotPasswordText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LoginErrorText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LoginButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed
        // TODO add your handling code here:
        Boolean UsernameBool = false, PasswordBool = false, ExistingAccount = false;
        String Username = LoginUsernameField.getText();
        char[] Password = LoginPasswordField.getPassword();
        String Pass = "";
        for(char PasswordChar : Password){
            Pass+=PasswordChar;
        }
        
        //Username Validation 
        if(Username.matches("")){
           RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            UsernameBool = true;
        }
        
        //Password Validation
        if(Password.equals("")){
            RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            PasswordBool = true;
        }
        
        if(UsernameBool && PasswordBool){
            try {      
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                PreparedStatement stmt = con.prepareStatement("SELECT * FROM account WHERE Username = ? AND Password = ?");
                stmt.setString(1, Username);
                stmt.setString(2, Pass);
                ResultSet results= stmt.executeQuery();
                while(results.next()){
                    ExistingAccount = true;
                }
                if(ExistingAccount){
                   AllProducts ProductPage = new AllProducts();
                   ProductPage.setVisible(true);
                   dispose();
                }
                else{
                    LoginErrorText.setForeground(Color.red);
                    LoginErrorText.setText("Invalid Login Credentials!");
                }
                con.close();
            } catch (Exception e) {
                System.out.println("Query Failed");
                    }
            
            
        
        
        }
        
        
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void RegistrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrationButtonActionPerformed
        // TODO add your handling code here:
        RegistrationErrorField.setForeground(Color.red);
        Boolean NameBool, SurnameBool, EmailBool, CityBool, CountryBool, UsernameBool, Password1Bool, Password2Bool;
        NameBool = SurnameBool = EmailBool = CityBool = CountryBool = UsernameBool = Password1Bool = Password2Bool = false;  
        String Name = RegistrationNameField.getText();
        String Surname = RegistrationSurnameField.getText();
        String Email = RegistrationEmailField.getText();
        String City = RegistrationCityField.getText();
        String Country = RegistrationCountryField.getText();
        String Username = RegistrationUsernameField.getText();
        char[] Password1 = RegistrationPasswordField.getPassword();
        char[] Password2  = RegistrationRepeatPasswordField.getPassword();
        String Pass1 = "", Pass2 = "";
        for(char PasswordChar : Password1){
            Pass1+=PasswordChar;
        }
        
        for(char PasswordChar : Password2){
            Pass2+=PasswordChar;
        }
        System.out.println(Pass1 + " " + Pass2);
        
        //Name Validation
        if(Name.matches("")){
            RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            for(int i = 0; i < (Name.length()); i++){
                char letter = Name.charAt(i);
                if(Character.isDigit(letter)){
                    RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
                    break;
                }
                else{
                    NameBool = true;
                }
            }
        }
        
        //Surname Validation
        if(Surname.matches("")){
            RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            for(int i = 0; i < (Surname.length()); i++){
                char letter = Surname.charAt(i);
                if(Character.isDigit(letter)){
                    RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
                    break;
                }
                else{
                    SurnameBool = true;
                }
            }
        }
        
        //Email Validation
        if(Email.matches("")){
            RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            if(Email.contains("@")){
                EmailBool = true;
            }
            else{
                 EmailErrorField.setText("'@' Notation Missing!");  
            }
            
        }
        
        //City Validation
        if(City.matches("")){
            RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            for(int i = 0; i < (City.length()); i++){
                char letter = City.charAt(i);
                if(Character.isDigit(letter)){
                    RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
                    break;
                }
                else{
                    CityBool = true;
                }
            }
        }
        
        //Country Validation
        if(Country.matches("")){
            RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            for(int i = 0; i < (Country.length()); i++){
                char letter = Country.charAt(i);
                if(Character.isDigit(letter)){
                    RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
                    break;
                }
                else{
                    CountryBool = true;
                }
            }
        }
        
        //Username Validation
        if(Username.matches("")){
           RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            UsernameBool = true;
        }
        
        //Password 1 Validation
        if(Password1.equals("")){
            RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            Password1Bool = true;
        }
        
        //Password 2 Validation
        if(Password2.equals("")){
            RegistrationErrorField.setText("All Fields must be Filled and Numbers are not Accepted!");
        }
        else{
            Password2Bool  = true;
        }
        
        
        //Inserting to Database
        Boolean CheckDoubleCountry, CheckDoubleCity;
        CheckDoubleCountry = CheckDoubleCity = false;
        if(NameBool && SurnameBool && EmailBool && CityBool && CountryBool && UsernameBool && Password1Bool && Password2Bool){
            if (Arrays.equals(Password1, Password2)){
                EmailErrorField.setText("");
                RegistrationErrorField.setText("");
                // Country Adding and Non Adding -----------------------------------------------------------------------
                try {      
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                    PreparedStatement stmt = con.prepareStatement("SELECT * FROM country WHERE Name = ?");
                    stmt.setString(1, Country);
                    ResultSet RowsSelected = stmt.executeQuery();
                    while (RowsSelected.next()) {
                        System.out.println(RowsSelected.getInt(1) + " " + RowsSelected.getString(2)); // Testing Purposes
                        CheckDoubleCountry = true;
                    }
                    con.close();
                } catch (Exception e) {
                    System.out.println("Query Failed");
                }
            
                if(CheckDoubleCountry){}
                else{
                    try {      
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                        PreparedStatement stmt = con.prepareStatement("INSERT INTO country(Name) values(?)");
                        stmt.setString(1, Country);
                        int RowsInserted = stmt.executeUpdate();
                        if (RowsInserted > 0){
                            System.out.println("Country Added");
                        }
                        con.close();
                    } catch (Exception e) {
                        System.out.println("Query Failed");
                    }
                }
                //----------------------------------------------------------------------------------------------------------------
                //City Adding and Non Adding--------------------------------------------------------------------------------------
                int CountryId = 0, AccountId = 0, CityId = 0;
                try {      
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                    PreparedStatement stmt = con.prepareStatement("SELECT * FROM country WHERE Name = ?");
                    stmt.setString(1, Country);
                    ResultSet RowsSelected = stmt.executeQuery();
                    while (RowsSelected.next()) {
                        CountryId = RowsSelected.getInt(1);
                    }
                    con.close();
                } catch (Exception e) {
                    System.out.println("Query Failed");
                }
                try {      
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                    PreparedStatement stmt = con.prepareStatement("SELECT * FROM town WHERE Name = ?");
                    stmt.setString(1, City);
                    ResultSet RowsSelected = stmt.executeQuery();
                    while (RowsSelected.next()) {
                        System.out.println(RowsSelected.getInt(1) + " " + RowsSelected.getString(2)); // Testing Purposes
                        CheckDoubleCity = true;
                    }
                    con.close();
                } catch (Exception e) {
                    System.out.println("Query Failed");
                }
                
                if(CheckDoubleCity){}
                else{
                    try {      
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                        PreparedStatement stmt = con.prepareStatement("INSERT INTO town(Name) VALUES(?");
                        stmt.setString(1, City);
                        int RowsInserted = stmt.executeUpdate();
                        if (RowsInserted > 0){
                            System.out.println("City Added");
                        }
                        con.close();
                    } catch (Exception e) {
                        System.out.println("Query Failed");
                    }
                }
                //----------------------------------------------------------------------------------------------------------------
                //Adding User-----------------------------------------------------------------------------------------------------
                try {      
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                        PreparedStatement stmt = con.prepareStatement("SELECT * FROM town WHERE Name = ?");
                        stmt.setString(1, City);
                        ResultSet RowsSelected = stmt.executeQuery();
                        while (RowsSelected.next()){
                            System.out.println(RowsSelected.getInt(1) + " " + RowsSelected.getString(2)); // Testing Purposes
                            CityId = RowsSelected.getInt(1);
                        }
                        con.close();
                    } catch (SQLException e) {
                        System.out.println("Query Failed");
                    }
                    try {      
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                        PreparedStatement stmt = con.prepareStatement("INSERT INTO account(Username, Password) VALUES(?, ?)");
                        stmt.setString(1, Username);
                        stmt.setString(2, Pass1);
                        int RowsInserted = stmt.executeUpdate();
                        if (RowsInserted > 0){
                            System.out.println("Account Added");
                        }
                        con.close();
                    } catch (Exception e) {
                        System.out.println("Query Failed");
                    }
                    try {      
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                        PreparedStatement stmt = con.prepareStatement("SELECT * FROM account WHERE Username = ? AND Password = ?");
                        stmt.setString(1, Username);
                        stmt.setString(2, Pass1);
                        ResultSet RowsSelected = stmt.executeQuery();
                        while (RowsSelected.next()) {
                            System.out.println(RowsSelected.getInt(1) + " " + RowsSelected.getString(2)); // Testing Purposes
                            AccountId = RowsSelected.getInt(1);
                        }
                        con.close();
                    } catch (SQLException e) {
                        System.out.println("Query Failed");
                    }
                    try {      
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sdprojectdb", "root", "");
                        PreparedStatement stmt = con.prepareStatement("INSERT INTO manager(Name, Surname, Email_Address, Town_Id, Account_Id) values(?, ?, ?, ?, ?)");
                        stmt.setString(1, Name);
                        stmt.setString(2, Surname);
                        stmt.setString(3, Email);
                        stmt.setInt(4, CityId);
                        stmt.setInt(5, AccountId);
                        int RowsInserted = stmt.executeUpdate();
                        if (RowsInserted > 0){
                            RegistrationNameField.setText("");
                            RegistrationSurnameField.setText("");
                            RegistrationEmailField.setText("");
                            RegistrationCityField.setText("");
                            RegistrationCountryField.setText("");
                            RegistrationUsernameField.setText("");
                            RegistrationPasswordField.setText("");
                            RegistrationRepeatPasswordField.setText("");
                            RegistrationErrorField.setForeground(Color.green);
                            RegistrationErrorField.setText("Account Registered!");
                            
                        }
                        con.close();
                    } catch (Exception e) {
                        System.out.println("Query Failed");
                    }
                
                
                
            }
            else{
                RegistrationErrorField.setText("Passwords Do Not Match!");
            }
       }
    }//GEN-LAST:event_RegistrationButtonActionPerformed

    private void ForgotPasswordTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ForgotPasswordTextMouseClicked
        // TODO add your handling code here:
        ForgotPasswordFrame ForgotPassword = new ForgotPasswordFrame();
        ForgotPassword.setVisible(true);  
        ForgotPassword.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_ForgotPasswordTextMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginAndRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginAndRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginAndRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginAndRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginAndRegistration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ApplicationTitle;
    private javax.swing.JLabel EmailErrorField;
    private javax.swing.JLabel ForgotPasswordText;
    private javax.swing.JButton LoginButton;
    private javax.swing.JLabel LoginErrorText;
    private javax.swing.JLabel LoginPassword;
    private javax.swing.JPasswordField LoginPasswordField;
    private javax.swing.JLabel LoginTitle;
    private javax.swing.JLabel LoginUsername;
    private javax.swing.JTextField LoginUsernameField;
    private javax.swing.JButton RegistrationButton;
    private javax.swing.JLabel RegistrationCity;
    private javax.swing.JTextField RegistrationCityField;
    private javax.swing.JLabel RegistrationCountry;
    private javax.swing.JTextField RegistrationCountryField;
    private javax.swing.JLabel RegistrationEmail;
    private javax.swing.JTextField RegistrationEmailField;
    private javax.swing.JLabel RegistrationErrorField;
    private javax.swing.JLabel RegistrationName;
    private javax.swing.JTextField RegistrationNameField;
    private javax.swing.JLabel RegistrationPassword;
    private javax.swing.JPasswordField RegistrationPasswordField;
    private javax.swing.JLabel RegistrationRepeatPassword;
    private javax.swing.JPasswordField RegistrationRepeatPasswordField;
    private javax.swing.JLabel RegistrationSurname;
    private javax.swing.JTextField RegistrationSurnameField;
    private javax.swing.JLabel RegistrationTitle;
    private javax.swing.JLabel RegistrationUsername;
    private javax.swing.JTextField RegistrationUsernameField;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
